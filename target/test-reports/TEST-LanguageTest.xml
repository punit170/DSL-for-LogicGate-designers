<?xml version='1.0' encoding='UTF-8'?>
<testsuite hostname="DESKTOP-QMSJJTS" name="LanguageTest" tests="56" errors="0" failures="0" skipped="0" time="0.188" timestamp="2024-02-11T23:38:17">
          <properties>
      <property name="java.specification.version" value="17"/><property name="sun.cpu.isalist" value="amd64"/><property name="sun.jnu.encoding" value="Cp1252"/><property name="sun.arch.data.model" value="64"/><property name="java.vendor.url" value="https://java.oracle.com/"/><property name="sun.boot.library.path" value="C:\Program Files\Java\jdk-17\bin"/><property name="sun.java.command" value="xsbt.boot.Boot test"/><property name="jdk.debug" value="release"/><property name="sun.stderr.encoding" value="cp437"/><property name="java.specification.vendor" value="Oracle Corporation"/><property name="java.version.date" value="2023-07-18"/><property name="java.home" value="C:\Program Files\Java\jdk-17"/><property name="file.separator" value="\"/><property name="java.vm.compressedOopsMode" value="32-bit"/><property name="line.separator" value="
"/><property name="sun.stdout.encoding" value="cp437"/><property name="java.vm.specification.vendor" value="Oracle Corporation"/><property name="java.specification.name" value="Java Platform API Specification"/><property name="user.script" value=""/><property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/><property name="java.runtime.version" value="17.0.8+9-LTS-211"/><property name="user.name" value="DELL"/><property name="log4j.ignoreTCL" value="true"/><property name="file.encoding" value="UTF-8"/><property name="jnidispatch.path" value="C:\Users\DELL\AppData\Local\Temp\jna-2094529\jna4792583283626483565.dll"/><property name="jna.loaded" value="true"/><property name="java.io.tmpdir" value="C:\Users\DELL\AppData\Local\Temp\"/><property name="java.version" value="17.0.8"/><property name="java.vm.specification.name" value="Java Virtual Machine Specification"/><property name="sun.os.patch.level" value=""/><property name="native.encoding" value="Cp1252"/><property name="java.library.path" value="C:\Program Files\Java\jdk-17\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Java\jdk-17\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\dotnet\;C:\MinGW\bin;C:\Program Files\Git\cmd;C:\Program Files\Java\scripts;C:\Program Files\Java\jdk-17\bin;%HADOOP_HOME%\bin;%HADOOP_HOME%\sbin;%PYTHON_HOME%;%SPARK_HOME%\bin;C:\Program Files (x86)\sbt\bin;C:\Users\DELL\anaconda3;C:\Users\DELL\anaconda3\Library\mingw-w64\bin;C:\Users\DELL\anaconda3\Library\usr\bin;C:\Users\DELL\anaconda3\Library\bin;C:\Users\DELL\anaconda3\Scripts;C:\Program Files\MySQL\MySQL Shell 8.0\bin\;C:\Users\DELL\AppData\Local\Programs\Python\Python310\Scripts\;C:\Users\DELL\AppData\Local\Programs\Python\Python310\;C:\Users\DELL\AppData\Local\Microsoft\WindowsApps;C:\Users\DELL\AppData\Local\Programs\Microsoft VS Code\bin;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2022.2.1\bin;;C:\Users\DELL\Downloads\Setups\windows_10_msbuild_Release_graphviz-8.1.0-win32\Graphviz\bin;C:\Program Files\Java\jdk-17\bin;;."/><property name="java.vendor" value="Oracle Corporation"/><property name="scala.ext.dirs" value="C:\Users\DELL\.sbt\1.0\java9-rt-ext-oracle_corporation_17_0_8"/><property name="sun.io.unicode.encoding" value="UnicodeLittle"/><property name="java.class.path" value="C:\Program Files (x86)\sbt\\bin\sbt-launch.jar"/><property name="java.vm.vendor" value="Oracle Corporation"/><property name="user.variant" value=""/><property name="jline.shutdownhook" value="false"/><property name="user.timezone" value="America/Chicago"/><property name="java.vm.specification.version" value="17"/><property name="os.name" value="Windows 11"/><property name="sun.java.launcher" value="SUN_STANDARD"/><property name="user.country" value="US"/><property name="sun.cpu.endian" value="little"/><property name="user.home" value="C:\Users\DELL"/><property name="user.language" value="en"/><property name="sbt.ipcsocket.tmpdir" value="C:\Users\DELL\AppData\Local\Temp\.sbt25234b66\ipcsocket"/><property name="swoval.tmpdir" value="C:\Users\DELL\AppData\Local\Temp\.sbt25234b66\swoval"/><property name="jline.esc.timeout" value="0"/><property name="path.separator" value=";"/><property name="os.version" value="10.0"/><property name="jna.nosys" value="true"/><property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/><property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/><property name="java.vendor.url.bug" value="https://bugreport.java.com/bugreport/"/><property name="user.dir" value="C:\UIC EDUCATION\SEM 3\CS441\github\DSL for LogicGate designers"/><property name="os.arch" value="amd64"/><property name="java.vm.info" value="mixed mode, sharing"/><property name="java.vm.version" value="17.0.8+9-LTS-211"/><property name="java.class.version" value="61.0"/>
    </properties>
          <testcase classname="LanguageTest" name="My first language for set theory operations! should Assign and test the NOT gate evaluation" time="0.031">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should Assign and test the OR gate evaluation" time="0.016">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should Assign and test the AND gate evaluation" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should Assign and test the NOR gate evaluation" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should Assign and test the NAND gate evaluation" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should Assign and test the XOR gate evaluation" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should Assign and test the XNOR gate evaluation" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should abide by the De Morgan's law" time="0.011">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should create a logic gate named logicGate3" time="0.005">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should change a gate bound to name LogicGate4" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should create inputs for logicGate5" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should obey the ShefferStroke's axiom" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should obey the Edward Vermilye Huntington's axiom" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should obey the Meredith's ShefferStroke axiom" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should obey the 1-basis axiom" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should throw an error for an Undefined Logic Gate being evaluated" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should throw an error for assigning an Input outside Scope of some defined LogicGate" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should create a class named Class1" time="0.015">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should set fields (X,Y) and method(m1,m2) of Class2 as Public" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should create an object named c1 of Class3 and invoke constructor to assign new field values" time="0.016">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should Invoke method m1 of object c1 and return last expression value = param x's value passed" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should Invoke field public X, protected Y and throw error on invoking field private Z of object c1" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should extend parentClass and call method in parentClass from childclass object" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should call method in parentClass's parentClass A from object of class C" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should access field of parent class in function of childclass" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should call overrided function of child class when object of parent class is assigned to object of child class" time="0.016">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should call obj1 function method when obj2  is substituted with obj1" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should create an abstract class named absClass1" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should throw an error for defining an abstract class without any abstract method" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should extend abstract Class absClass2 from a concrete class absChildClass2, call method in absClass2 , call overridden abstract method of absClass2, Invoke Filed Y from absChildClass2 object" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should extend an abstract class absClass4 from abstract class absClass3, extend a concrete class absChildClass 4 from absClass 4, invoke abstract methods from absChildClass object" time="0.015">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should create an interface class named myInterface1" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should throw an error for implementing an interface without overriding all its functions" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should throw an error for implementing an interface by another interface, extending a class from an interface, extending an interface from a class" time="0.016">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should call overridden methods of interface myInterface4 and its super interface myInterface5 from object of class iClass3 that implements myInterface4" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should Invoke Interface constant field from class object that implements Interface if that field does not exist in the class" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should call overridden abstract method f3 in base class that extends an abstract class which inturn implements an interface" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should throw an error when trying to implement an interface by another interface" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should throw an error if cyclic inheritance exists" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should implement two or more different interfaces that declare methods with exactly the same signatures by a concrete class" time="0.015">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should allow an abstract class that inherit from another abstract class and implement interfaces where all interfaces and the abstract class have methods with the same signatures" time="0.002">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should allow an abstract class to inherit from a concrete class" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should check condition for IF and run the thenClause" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should check condition for IF and run the elseClause" time="0.014">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should create an exception class and Handle exception construct with only its try block running" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should throw an error for handling an exception of a non-existing exception class" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should Handle an exception with error thrown in the try block, reason printed, and catch block executed" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should handle nested try and catch blocks and run catch block for ExceptionClass4" time="0.016">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should partially evaluate a simple expression if no inputs are given" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should completely evaluate a partially evaluated simple expression when all its inputs are provided" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should completely evaluate a partially evaluated complex expression when all its inputs are provided" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should use monadic function MAP() to simplify a given expression" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should use monadic function MAP() to simplify a very complex expression" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should partially evaluate an IF block in the case the condition passed to the IF block partially evaluates" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should completely evaluate a partially evaluated IF expression when all its condition are provided" time="0.0">
                      
                    </testcase><testcase classname="LanguageTest" name="My first language for set theory operations! should throw an exception if TestGate is used to compare evaluation of some logicgate to a boolean value, which can only be evaluated partially" time="0.0">
                      
                    </testcase>
          <system-out><![CDATA[]]></system-out>
          <system-err><![CDATA[]]></system-err>
        </testsuite>